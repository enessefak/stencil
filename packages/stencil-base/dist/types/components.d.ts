/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface JsfiButton {
    /**
    * Color field
    */
    'color': string;
    /**
    * Icon field
    */
    'icon': string;
    /**
    * Outline field
    */
    'outline': boolean;
    /**
    * Radius field
    */
    'radius': boolean;
    /**
    * Size field
    */
    'size': string;
  }
  interface JsfiCallToAction {}
  interface JsfiCard {}
  interface JsfiFormElement {
    'label': string;
  }
  interface JsfiGrid {
    /**
    * Columns field
    */
    'columns': string;
    /**
    * Grid gap field
    */
    'gap': string;
    /**
    * Justify Content field
    */
    'justifyContent': string;
    /**
    * Rows field
    */
    'rows': string;
  }
  interface JsfiHeader {}
  interface JsfiIcon {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    /**
    * The color to use for the background of the item.
    */
    'color'?: string;
    /**
    * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
    */
    'flipRtl'?: boolean;
    /**
    * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
    */
    'icon'?: any;
    /**
    * Specifies which icon to use on `ios` mode.
    */
    'ios'?: string;
    /**
    * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy': boolean;
    /**
    * Specifies which icon to use on `md` mode.
    */
    'md'?: string;
    /**
    * The mode determines which platform styles to use.
    */
    'mode': string;
    /**
    * Specifies which icon to use from the built-in set of icons.
    */
    'name'?: string;
    /**
    * The size of the icon. Available options are: `"small"` and `"large"`.
    */
    'size'?: string;
    /**
    * Specifies the exact `src` of an SVG file to use.
    */
    'src'?: string;
  }
  interface JsfiInput {
    'placeholder'?: string;
    'type': string;
  }
  interface JsfiLabel {}
  interface JsfiLayout {}
  interface JsfiToggleButton {}
}

declare global {


  interface HTMLJsfiButtonElement extends Components.JsfiButton, HTMLStencilElement {}
  var HTMLJsfiButtonElement: {
    prototype: HTMLJsfiButtonElement;
    new (): HTMLJsfiButtonElement;
  };

  interface HTMLJsfiCallToActionElement extends Components.JsfiCallToAction, HTMLStencilElement {}
  var HTMLJsfiCallToActionElement: {
    prototype: HTMLJsfiCallToActionElement;
    new (): HTMLJsfiCallToActionElement;
  };

  interface HTMLJsfiCardElement extends Components.JsfiCard, HTMLStencilElement {}
  var HTMLJsfiCardElement: {
    prototype: HTMLJsfiCardElement;
    new (): HTMLJsfiCardElement;
  };

  interface HTMLJsfiFormElementElement extends Components.JsfiFormElement, HTMLStencilElement {}
  var HTMLJsfiFormElementElement: {
    prototype: HTMLJsfiFormElementElement;
    new (): HTMLJsfiFormElementElement;
  };

  interface HTMLJsfiGridElement extends Components.JsfiGrid, HTMLStencilElement {}
  var HTMLJsfiGridElement: {
    prototype: HTMLJsfiGridElement;
    new (): HTMLJsfiGridElement;
  };

  interface HTMLJsfiHeaderElement extends Components.JsfiHeader, HTMLStencilElement {}
  var HTMLJsfiHeaderElement: {
    prototype: HTMLJsfiHeaderElement;
    new (): HTMLJsfiHeaderElement;
  };

  interface HTMLJsfiIconElement extends Components.JsfiIcon, HTMLStencilElement {}
  var HTMLJsfiIconElement: {
    prototype: HTMLJsfiIconElement;
    new (): HTMLJsfiIconElement;
  };

  interface HTMLJsfiInputElement extends Components.JsfiInput, HTMLStencilElement {}
  var HTMLJsfiInputElement: {
    prototype: HTMLJsfiInputElement;
    new (): HTMLJsfiInputElement;
  };

  interface HTMLJsfiLabelElement extends Components.JsfiLabel, HTMLStencilElement {}
  var HTMLJsfiLabelElement: {
    prototype: HTMLJsfiLabelElement;
    new (): HTMLJsfiLabelElement;
  };

  interface HTMLJsfiLayoutElement extends Components.JsfiLayout, HTMLStencilElement {}
  var HTMLJsfiLayoutElement: {
    prototype: HTMLJsfiLayoutElement;
    new (): HTMLJsfiLayoutElement;
  };

  interface HTMLJsfiToggleButtonElement extends Components.JsfiToggleButton, HTMLStencilElement {}
  var HTMLJsfiToggleButtonElement: {
    prototype: HTMLJsfiToggleButtonElement;
    new (): HTMLJsfiToggleButtonElement;
  };
  interface HTMLElementTagNameMap {
    'jsfi-button': HTMLJsfiButtonElement;
    'jsfi-call-to-action': HTMLJsfiCallToActionElement;
    'jsfi-card': HTMLJsfiCardElement;
    'jsfi-form-element': HTMLJsfiFormElementElement;
    'jsfi-grid': HTMLJsfiGridElement;
    'jsfi-header': HTMLJsfiHeaderElement;
    'jsfi-icon': HTMLJsfiIconElement;
    'jsfi-input': HTMLJsfiInputElement;
    'jsfi-label': HTMLJsfiLabelElement;
    'jsfi-layout': HTMLJsfiLayoutElement;
    'jsfi-toggle-button': HTMLJsfiToggleButtonElement;
  }
}

declare namespace LocalJSX {
  interface JsfiButton {
    /**
    * Color field
    */
    'color'?: string;
    /**
    * Icon field
    */
    'icon'?: string;
    /**
    * Outline field
    */
    'outline'?: boolean;
    /**
    * Radius field
    */
    'radius'?: boolean;
    /**
    * Size field
    */
    'size'?: string;
  }
  interface JsfiCallToAction {}
  interface JsfiCard {}
  interface JsfiFormElement {
    'label'?: string;
  }
  interface JsfiGrid {
    /**
    * Columns field
    */
    'columns'?: string;
    /**
    * Grid gap field
    */
    'gap'?: string;
    /**
    * Justify Content field
    */
    'justifyContent'?: string;
    /**
    * Rows field
    */
    'rows'?: string;
  }
  interface JsfiHeader {}
  interface JsfiIcon {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    /**
    * The color to use for the background of the item.
    */
    'color'?: string;
    /**
    * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
    */
    'flipRtl'?: boolean;
    /**
    * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
    */
    'icon'?: any;
    /**
    * Specifies which icon to use on `ios` mode.
    */
    'ios'?: string;
    /**
    * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy'?: boolean;
    /**
    * Specifies which icon to use on `md` mode.
    */
    'md'?: string;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: string;
    /**
    * Specifies which icon to use from the built-in set of icons.
    */
    'name'?: string;
    /**
    * The size of the icon. Available options are: `"small"` and `"large"`.
    */
    'size'?: string;
    /**
    * Specifies the exact `src` of an SVG file to use.
    */
    'src'?: string;
  }
  interface JsfiInput {
    'placeholder'?: string;
    'type'?: string;
  }
  interface JsfiLabel {}
  interface JsfiLayout {}
  interface JsfiToggleButton {
    'onMenuToggle'?: (event: CustomEvent<any>) => void;
  }

  interface IntrinsicElements {
    'jsfi-button': JsfiButton;
    'jsfi-call-to-action': JsfiCallToAction;
    'jsfi-card': JsfiCard;
    'jsfi-form-element': JsfiFormElement;
    'jsfi-grid': JsfiGrid;
    'jsfi-header': JsfiHeader;
    'jsfi-icon': JsfiIcon;
    'jsfi-input': JsfiInput;
    'jsfi-label': JsfiLabel;
    'jsfi-layout': JsfiLayout;
    'jsfi-toggle-button': JsfiToggleButton;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'jsfi-button': LocalJSX.JsfiButton & JSXBase.HTMLAttributes<HTMLJsfiButtonElement>;
      'jsfi-call-to-action': LocalJSX.JsfiCallToAction & JSXBase.HTMLAttributes<HTMLJsfiCallToActionElement>;
      'jsfi-card': LocalJSX.JsfiCard & JSXBase.HTMLAttributes<HTMLJsfiCardElement>;
      'jsfi-form-element': LocalJSX.JsfiFormElement & JSXBase.HTMLAttributes<HTMLJsfiFormElementElement>;
      'jsfi-grid': LocalJSX.JsfiGrid & JSXBase.HTMLAttributes<HTMLJsfiGridElement>;
      'jsfi-header': LocalJSX.JsfiHeader & JSXBase.HTMLAttributes<HTMLJsfiHeaderElement>;
      'jsfi-icon': LocalJSX.JsfiIcon & JSXBase.HTMLAttributes<HTMLJsfiIconElement>;
      'jsfi-input': LocalJSX.JsfiInput & JSXBase.HTMLAttributes<HTMLJsfiInputElement>;
      'jsfi-label': LocalJSX.JsfiLabel & JSXBase.HTMLAttributes<HTMLJsfiLabelElement>;
      'jsfi-layout': LocalJSX.JsfiLayout & JSXBase.HTMLAttributes<HTMLJsfiLayoutElement>;
      'jsfi-toggle-button': LocalJSX.JsfiToggleButton & JSXBase.HTMLAttributes<HTMLJsfiToggleButtonElement>;
    }
  }
}


